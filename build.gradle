/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id 'com.adarshr.test-logger' version '2.1.0'
}

allprojects {
  apply plugin: 'io.spinnaker.project'
  repositories {mavenCentral()}
  tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
  }
}

subprojects {
  group = "io.spinnaker.echo"

  if ([korkVersion, fiatVersion].find { it.endsWith("-SNAPSHOT") }) {
    repositories {
      mavenLocal()
       maven{
        url "https://nexus.opsmx.net/repository/maven-snapshots/"
          credentials {
                    username = "NEXUS_USERNAME"
                    password = "NEXUS_PASSWORD"
                         }
      }
    }
  }

  if (name != "echo-bom") {
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'

    test {
      testLogging {
        exceptionFormat = 'full'
        afterSuite { desc, result ->
          if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println "Report file: ${reports.html.entryPoint}"
          }
        }
      }
     useJUnitPlatform {
       includeEngines "junit-jupiter"
     }
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8189'
      }
    }
  }

  if (name != "echo-bom" && name != "echo-api") {
    jacoco {
      toolVersion = '0.8.3'
    }

    dependencies {
      api("org.apache.groovy:groovy")
      implementation enforcedPlatform("io.spinnaker.kork:kork-bom:$korkVersion")
      annotationProcessor platform("io.spinnaker.kork:kork-bom:$korkVersion")
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
      testAnnotationProcessor platform("io.spinnaker.kork:kork-bom:$korkVersion")
      compileOnly "org.projectlombok:lombok"
      annotationProcessor "org.projectlombok:lombok"
      testAnnotationProcessor "org.projectlombok:lombok"
      implementation "org.apache.groovy:groovy"
      annotationProcessor "org.projectlombok:lombok"
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

      implementation "com.github.ben-manes.caffeine:guava"
      implementation "com.netflix.spectator:spectator-api"
      implementation "org.slf4j:slf4j-api"
      implementation "net.logstash.logback:logstash-logback-encoder"
      implementation "org.springframework.boot:spring-boot-properties-migrator"
      implementation("com.jcraft:jsch:0.1.55")

      testImplementation "org.spockframework:spock-core"

      testImplementation "org.springframework.boot:spring-boot-starter-test"
      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation "org.springframework:spring-test"
      testImplementation "org.hamcrest:hamcrest-core"
      testRuntimeOnly "cglib:cglib-nodep"
      testRuntimeOnly "org.objenesis:objenesis"
    }
  }
}

defaultTasks ':echo-web:run'
